-- Title: Accelerometer & Gyroscope BMI160
-- Author: Matthew Schinkel, copyright (c) 2017, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q5
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library provides routines to read x,y,z values from
--              BMI160's accelerometer & gyroscope using SPI.
--
-- Notes:
--
-- This device also supports I2C, but I have not added support in this lib.
--
-- My testing was done with a small 12 pin board from ebay.
-- connections are as follows:
--
-- PIC / BMI160
-- SDO -> SDA
-- SDI -> SAO
-- SS  -> CS
-- SCK -> SCL
-- N/A -> SDX
-- N/A -> SCX
-- N/A -> INT1
-- N/A -> INT2
-- N/A -> OCS
--
-- Sources:
-- http://www.mouser.com/ds/2/783/BST-BMI160-DS000-07-786474.pdf
--

include delay

-- general constants
const byte BMI160_READ = 0x80
const byte BMI160_WRITE = 0x00

-- registers
const byte BMI160_REG_DEVICE_ID = 0x00
const byte BMI160_REG_ACC_RANGE = 0x41
const byte BMI160_REG_GYR_RANGE = 0x43
const byte BMI160_REG_CMD = 0x7E
const byte BMI160_REG_STATUS = 0x1B

-- commands for the command register
const byte BMI160_SOFT_RESET = 0xB6

--------------------------------------------------------------------------------
-- read a register
--------------------------------------------------------------------------------
function bmi160_read_reg(byte in register) return byte is
   var byte data

   mbi160_chip_select = low
   spi_master = BMI160_READ + register
   data = spi_master
   mbi160_chip_select = high

   return data
end function

--------------------------------------------------------------------------------
-- write to a register
--------------------------------------------------------------------------------
procedure bmi160_write_reg(byte in register, byte in data) is
   mbi160_chip_select = low
   spi_master = BMI160_WRITE + register
   spi_master = data
   mbi160_chip_select = high
end procedure

--------------------------------------------------------------------------------
-- communication test
--------------------------------------------------------------------------------
function bmi_160_communication_test() return bit is
   var byte device_id
   device_id = bmi160_read_reg(BMI160_REG_DEVICE_ID)
   if device_id == 0xD1 then
      return 1
   else
      return 0
   end if
end function

--------------------------------------------------------------------------------
-- Initialize BMI160
--------------------------------------------------------------------------------
procedure bmi160_init() is
   var byte data
   
   mbi160_chip_select_direction = output
   mbi160_chip_select = low

   -- Read 0x7F to select SPI mode (per datasheet)
   data = bmi160_read_reg(0x7F) -- read register that doesn't exist
   delay_1ms(10)
   
   -- soft reset
   bmi160_write_reg(BMI160_REG_CMD, BMI160_SOFT_RESET);
   delay_10us(30)
   
   -- Read 0x7F to select SPI mode (per datasheet)
   data = bmi160_read_reg(0x7F) -- read register that doesn't exist
   delay_1ms(10)

   -- Turn on accelerometer
   bmi160_write_reg(BMI160_REG_CMD, 0x11);
   delay_1ms(4)

   -- Turn on gyro
   bmi160_write_reg(BMI160_REG_CMD, 0x15);
   delay_1ms(80)
end procedure

--------------------------------------------------------------------------------
-- Read gyro Z axis
--------------------------------------------------------------------------------
function bmi_160_gyro_x() return word is
   var word gyr_x
   var byte _gyr_x[2] at gyr_x
   _gyr_x[0] = bmi160_read_reg(0x0C)
   _gyr_x[1] = bmi160_read_reg(0x0D)
   return gyr_x
end function

--------------------------------------------------------------------------------
-- Read gyro Z axis
--------------------------------------------------------------------------------
function bmi_160_gyro_y() return word is
   var word gyr_y
   var byte _gyr_y[2] at gyr_y
   _gyr_y[0] = bmi160_read_reg(0x0E)
   _gyr_y[1] = bmi160_read_reg(0x0F)
   return gyr_y
end function

--------------------------------------------------------------------------------
-- Read gyro Z axis
--------------------------------------------------------------------------------
function bmi_160_gyro_z() return word is
   var word gyr_z
   var byte _gyr_z[2] at gyr_z
   _gyr_z[0] = bmi160_read_reg(0x10)
   _gyr_z[1] = bmi160_read_reg(0x11)
   return gyr_z
end function

--------------------------------------------------------------------------------
-- Read accelerometer X axis
--------------------------------------------------------------------------------
function bmi_160_accelerometer_x() return word is
   var word acc_x
   var byte _acc_x[2] at acc_x
   _acc_x[0] = bmi160_read_reg(0x12)
   _acc_x[1] = bmi160_read_reg(0x13)
   return acc_x
end function

--------------------------------------------------------------------------------
-- Read accelerometer Y axis
function bmi_160_accelerometer_y() return word is
   var word acc_y
   var byte _acc_y[2] at acc_y
   _acc_y[0] = bmi160_read_reg(0x14)
   _acc_y[1] = bmi160_read_reg(0x15)
   return acc_y
end function

--------------------------------------------------------------------------------
-- Read accelerometer Z axis
--------------------------------------------------------------------------------
function bmi_160_accelerometer_z() return word is
   var word acc_z
   var byte _acc_z[2] at acc_z
   _acc_z[0] = bmi160_read_reg(0x16)
   _acc_z[1] = bmi160_read_reg(0x17)
   return acc_z
end function
