-- Title: Large Array 1 library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009..2019, all rights reserved.
-- Adapted-by: Rob Jansen 
-- Compiler: >=2.5r2
-- Revision: $Revision$
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This is library for creating an array that take up more than
--              256 bytes memory. Works for PIC14H and PIC16 cores. 
--
-- Sources: 
--
-- Notes:
-- Supports byte array with up to 2048 entries (LARGE_ARRAY_1_VARIABLE_SIZE = 1)
-- Supports word array with up to 1024 entries (LARGE_ARRAY_1_VARIABLE_SIZE = 2)
-- Supports dword array with up to 512 entries (LARGE_ARRAY_1_VARIABLE_SIZE = 4)
-- Creates an array named large_array_1
-- Use "alias new_array_name is large_array_1" to rename the array
-- Small sample of how this lib was created at bottom of lib.
--
-- Example:
-- const dword LARGE_ARRAY_1_SIZE = 600        -- choose number of array variables
-- const dword LARGE_ARRAY_1_VARIABLE_SIZE = 2 -- choose size of variables (word)
-- include large_array_1                       -- include the array library
-- alias test is large_array_1                 -- rename/alias the array to test
--

-- Include the correct library based on the target CPU and the array type.
if (target_cpu == PIC_14H) | (target_cpu == PIC_14)then
   if LARGE_ARRAY_1_VARIABLE_SIZE == 1 then    -- Byte array type.
      include large_byte_array_1_pic14
   elsif LARGE_ARRAY_1_VARIABLE_SIZE == 2 then -- Word array type.
      include large_word_array_1_pic14
   elsif LARGE_ARRAY_1_VARIABLE_SIZE == 4 then -- Word array type.
      include large_dword_array_1_pic14
   end if
elsif (target_cpu == PIC_16) then
   if LARGE_ARRAY_1_VARIABLE_SIZE == 1 then    -- Byte array type.
      include large_byte_array_1_pic16
   elsif LARGE_ARRAY_1_VARIABLE_SIZE == 2 then -- Word array type.
      include large_word_array_1_pic16
   elsif LARGE_ARRAY_1_VARIABLE_SIZE == 4 then -- Dword array type.
      include large_dword_array_1_pic16
   end if
else
   _ERROR "Large Array 1 not supported for this PIC"
end if

------------ HERE IS AN EXAMPLE OF HOW THIS LIB WORKS --------------
--      -- example usage
--      const dword LARGE_ARRAY_1_SIZE = 300           -- choose number of array variables
--      const dword LARGE_ARRAY_1_VARIABLE_SIZE = 1    -- choose size of variables (byte*1)
--      -- include large_array                    -- include the array library
--      -- alias test is large_array_1            -- rename/alias the array to test
--
--
--      if LARGE_ARRAY_1_VARIABLE_SIZE == 1 then -- if array has byte variables
--
--        -- create vars for if LARGE_ARRAY_1_SIZE is between 256 and 512
--        var byte _large_array_1_byte_1b[256]
--        if !(LARGE_ARRAY_1_SIZE == 256) then
--          var byte _large_array_1_byte_2b[LARGE_ARRAY_1_SIZE - (256)]
--        end if
--
--        -- create vars for if LARGE_ARRAY_1_SIZE is between 0 and 256
--        if !(LARGE_ARRAY_1_SIZE == 0) then
--          var byte _large_array_1_byte_1a[LARGE_ARRAY_1_SIZE]
--        end if
--
--        -- get a value from a large byte array
--        function large_array_1'get(word in address) return byte is
--          var byte data
--
--          -- if "LARGE_ARRAY_1_SIZE > 256" we will use "b" array's. "a" arrays will get ignored by compiler.
--          if LARGE_ARRAY_1_SIZE >  256 then      -- notice constants here,
--            if address >=  256 then
--               data = _large_array_1_byte_2b[address - 256]
--            else
--               data = _large_array_1_byte_1b[address - 0]
--            end if
--          elsif LARGE_ARRAY_1_SIZE >  0 then    -- and constants here.
--               data = _large_array_1_byte_1a[address - 0]
--          end if
--
--          return data
--        end function
--
--        -- store a value into a large byte array
--        procedure large_array_1'put (word in address, byte in data) is
--          -- if "LARGE_ARRAY_1_SIZE > 256" we will use "b" array's. "a" arrays will get ignored by compiler.
--          if LARGE_ARRAY_1_SIZE >  256 then          -- notice constants here,
--            if address >=  256 then
--               _large_array_1_byte_2b[address - 256] = data
--            else
--               _large_array_1_byte_1b[address - 0] = data
--            end if
--          elsif LARGE_ARRAY_1_SIZE >  0 then         -- and constants here.
--               _large_array_1_byte_1a[address - 0] = data
--          end if
--        end procedure
--      if LARGE_ARRAY_1_VARIABLE_SIZE == 2 then -- if array has word variables
--        -- code here
--      end if
--------------------------------------------------------------------------                                      

