-- Title: Memory Pointers (indirect registers)
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009..2020, all rights reserved.                                                                                                               f
-- Adapted-by: Rob Jansen
-- Compiler: >=2.5r3
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Memory Pointers. For fast sequential array read/writes.
--
-- Sources:
--
-- Notes: If POSTINC1 is not supported, another method is used to provide the
--        same functionality. Your code should check if defined(mem_pointer1)
--        before using, otherwise use another method of doing whatever it is
--        your trying to do. Only works on var arrays not const arrays.
--

--------------------------------------------------------------------------------
-- WHEREIS() is now supported by the compiler, please use WHEREIS() instead.
-- Get the address of an array variable.
--------------------------------------------------------------------------------
if !defined(mem_whereis_array) then
   function mem_whereis_array(byte in var[]) return word is
       var word rval

       var byte rval_[2] at rval
       assembler
           bank movf var,w
           movwf rval_[0]
           movf var+1,w
           movwf rval_[1]
       end assembler

       return rval
   end function
end if

--------------------------------------------------------------------------------
-- Check if POSTINC1 exists on this chip.
--------------------------------------------------------------------------------
if defined(POSTINC1) then
   -- aliases
   alias mem_pointer1_address is FSR1
   alias mem_pointer1_low is FSR1L
   alias mem_pointer1_high is FSR1H

   if !defined(MEM_POINTER1_VAR_SIZE) then
      const MEM_POINTER1_VAR_SIZE = 1
   end if

   -- memory pointer data retreval variable
   if MEM_POINTER1_VAR_SIZE == 1 then
      alias mem_pointer1 is POSTINC1
   end if

   if MEM_POINTER1_VAR_SIZE == 2 then
      function mem_pointer1() return word is
         pragma inline
         var word data
         var byte _data[2] at data
         _data[0] = POSTINC1
         _data[1] = POSTINC1
         return data
      end function
   end if

   if MEM_POINTER1_VAR_SIZE == 4 then
      function mem_pointer1() return dword is
         pragma inline
         var dword data
         var byte _data[4] at data
         _data[0] = POSTINC1
         _data[1] = POSTINC1
         _data[2] = POSTINC1
         _data[3] = POSTINC1
         return data
      end function
   end if
else
   -- No POSTINC1, use alternative method.
   var volatile word mem_pointer1_address

   if !defined(MEM_POINTER1_VAR_SIZE) then
      const MEM_POINTER1_VAR_SIZE = 1
   end if

   -- memory pointer data retreval variable
   if MEM_POINTER1_VAR_SIZE == 1 then
      procedure mem_pointer1'put(byte in data) is
      pragma inline
         assembler
            -- get value from pointer address
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf data,w
            bank movwf indf0
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
         end assembler
      end procedure

      function mem_pointer1'get() return byte is
      pragma inline
      var byte data
         assembler
            -- get value from pointer address
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf indf0,w
            bank movwf data
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
         end assembler
         return data
      end function
   end if -- MEM_POINTER1_VAR_SIZE == 1

   if MEM_POINTER1_VAR_SIZE == 2 then     
      procedure mem_pointer1'put(word in data) is
      pragma inline
         var byte _data[2] at data
         assembler
            -- get value from pointer address for first half of word
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf _data[0],w
            bank movwf indf0
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for seond half of word
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf _data[1],w
            bank movwf indf0
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
         end assembler
      end procedure

      function mem_pointer1'get() return word is
      pragma inline
         var word data
         var byte _data[2] at data
         assembler
            -- get value from pointer address for first half of word      
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf indf0,w
            bank movwf _data[0]
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for second half of word      
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf indf0,w
            bank movwf _data[1]
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
         end assembler
         return data
      end function
   end if -- MEM_POINTER1_VAR_SIZE == 2

   if MEM_POINTER1_VAR_SIZE == 4 then     
      procedure mem_pointer1'put(dword in data) is
      pragma inline
         var byte _data[4] at data
         assembler
            -- get value from pointer address for _data[0]
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf _data[0],w
            bank movwf indf0
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for _data[1]
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf _data[1],w
            bank movwf indf0
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for _data[2]
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf _data[2],w
            bank movwf indf0
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for _data[3]
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf _data[3],w
            bank movwf indf0
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
         end assembler
      end procedure

      function mem_pointer1'get() return dword is
      pragma inline
         var dword data
         var byte _data[4] at data
         assembler
            -- get value from pointer address for _data[0]       
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf indf0,w
            bank movwf _data[0]
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for _data[1]       
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf indf0,w
            bank movwf _data[1]
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for _data[2]       
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf indf0,w
            bank movwf _data[2]
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
            -- get value from pointer address for _data[3]       
            bank movf mem_pointer1_address,w
            bank movwf fsr0l
            bank movf mem_pointer1_address+1,w
            bank movwf fsr0h
            bank movf indf0,w
            bank movwf _data[3]
            -- increment pointer
            bank incf mem_pointer1_address,f
            btfsc status, 2
            incf mem_pointer1_address+1,f
         end assembler
         return data
      end function
   end if -- MEM_POINTER1_VAR_SIZE == 4

end if -- POSTINC1
