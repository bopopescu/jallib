-- ------------------------------------------------------
-- Title: HT9200 DTMF generator sample
--
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4o
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Select a DTMF signal to be generated by HT9200.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
-- Sound is only generated while chip select is LOW.
--
-- This chip is meant to use 5 bit SPI, so the CS line must be toggled for
-- each data byte sent since the SPI libraries are 8 bit.
--
-- This chip uses SPI mode 1,1 but may work with other modes.
--
include 18f4550                    -- target PICmicro
--
-- Compiler directives
pragma target CLOCK    48_000_000  -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      HS_PLL      -- HS crystal or resonator
--                                    and using PLL
pragma target PLLDIV   P5          -- reduce OSC 20->4 MHz for PLL input
pragma target CPUDIV   P1          -- CPU freq. from PLL(96)/2 -> 48 MHz
--                                    (without PLL: CPU freq. = OSC freq.)
pragma target USBDIV   P2          -- USB clock from PLL module
pragma target FCMEN    DISABLED    -- no fail-safe clock monitoring
pragma target IESO     DISABLED    -- no int/ext clock switchover
pragma target BROWNOUT DISABLED    -- no brownout detection
pragma target VREGEN   ENABLED     -- enable USB voltage regulator
--                                    (when no external regulator at Vusb)
pragma target WDT      CONTROL    -- no watchdog
pragma target XINST    DISABLED    -- not supported by JalV2
pragma target DEBUG    DISABLED    -- no debugging
pragma target LVP      ENABLED     -- allow Low Voltage Programming
pragma target ICPRT    DISABLED    -- no In Circuit Debug
pragma target MCLR     EXTERNAL    -- reset externally
--
-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
OSCCON_SCS = 0b00                  -- select primary clock source
--

-- delay library
include delay

-- set all IO as digital
enable_digital_io()

-- setup SPI software
alias spi_master_sw_sdi              is pin_d3
alias spi_master_sw_sdi_direction    is pin_d3_direction
alias spi_master_sw_sdo              is pin_d1
alias spi_master_sw_sdo_direction    is pin_d1_direction
alias spi_master_sw_sck              is pin_d0
alias spi_master_sw_sck_direction    is pin_d0_direction
-- define spi inputs/outputs
spi_master_sw_sdi_direction = input    -- spi input
spi_master_sw_sdo_direction = output   -- spi output
spi_master_sw_sck_direction = output   -- spi clock
--
include spi_master_sw
spi_master_sw_init(SPI_MODE_11) -- init spi, choose mode
alias spi_master is spi_master_sw
alias spi_master_set_speed is spi_master_sw_set_speed
alias spi_master_set_mode is spi_master_sw_set_mode

-- setup HT9200A
-- setup dtmf pins
alias ht9200_chip_select is pin_a1
alias ht9200_chip_select_direction is pin_a1_direction
ht9200_chip_select_direction = output
--
ht9200_chip_select = HIGH -- enable the chip
include dtmf_encoder_ht9200

-- main program
const byte phone_number[] = "555 829 9112" -- set a phone number
forever loop
   hd9200_dial(phone_number,3)
   delay_1s(1)
end loop




--

