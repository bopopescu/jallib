-- ------------------------------------------------------
-- Title: Single channel dimmer
-- Author: Rob Hamerling, Copyright (c) 2009..2019, all rights reserved.
-- Adapted-by: Rob Jansen
-- Compiler: 2.5r2
-- Revision: $Revision$
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- This program shows a simple single channel dimmer by using
-- a combination of one ADC input pin and one PWM output pin.
-- Internal oscillator is used for minimum components.
-- PWM resolution of 256 steps is sufficient for this purpose,
-- and accorlingly low resolution ADC is selected.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--
include 12f683                                  -- target PIC

-- Use internal oscillator at 8MHz
pragma target CLOCK     8_000_000
pragma target OSC       INTOSC_NOCLKOUT
pragma target WDT       disabled
OSCCON_IRCF   = 0b_111                          -- Fosc = 8 MHz

enable_digital_io()                             -- set all IO as digital

-- ADC setup
const byte ADC_NVREF = ADC_NO_EXT_VREF          -- no external Vref
const ADC_RSOURCE = 4_700                       -- Input resistance: 4.7K potmeter
const ADC_HIGH_RESOLUTION = FALSE               -- Low res ADC is good enough!
include adc                                     -- fetch the ADC librarye
adc_init()                                      -- Initialize

const  byte  ADC_CHANNEL = 3                    -- potmeter connected to pin_AN3
ANSEL_ANS3 = TRUE                               -- init the selected ADC channel
pin_AN3_direction = input

-- PWM setup -------
include pwm_hardware                            -- fetch PWM library
pwm_max_resolution(1)                           -- max res. with highest possible freq.
pin_CCP1_direction = output                     -- set PWM-pin output

var byte measure                                -- ADC value / PWM duty cycle

-- ---- mainline ----
forever loop
   measure = adc_read_low_res(ADC_CHANNEL)      -- get ADC result
   pwm1_set_dutycycle_ratio(4 * measure)        -- copy to PWM duty cycle
end loop

