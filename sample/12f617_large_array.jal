-- Title: Test program for Large Array 
-- Author: Rob Jansen, copyright (c) 2019..2019, all rights reserved.
-- Adapted-by: 
-- Compiler: >=2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This is an example large array for creating an array that
--              take up more then 256 bytes memory. 
--
-- Sources:
--
-- Notes:
-- Supports byte array with up to 2048 entries (LARGE_ARRAY_1_VARIABLE_SIZE = 1)
-- Supports word array with up to 1024 entries (LARGE_ARRAY_1_VARIABLE_SIZE = 2)
-- Supports dword array with up to 512 entries (LARGE_ARRAY_1_VARIABLE_SIZE = 4)
-- Creates an array named large_array_1
-- Use "alias new_array_name is large_array_1" to rename the array
--
-- Important: There is no range check on the index in the array.
--
-- Example:
-- const dword LARGE_ARRAY_1_SIZE = 600        -- choose number of array variables
-- const dword LARGE_ARRAY_1_VARIABLE_SIZE = 2 -- choose bytes size of variables
-- include large_array_1                       -- include the array library
-- alias test is large_array_1                 -- rename/alias the array
--
-- Only created to see if it can compile.

include 12f617                 

; Use internal clock and internal reset.
pragma target OSC      INTOSC_NOCLKOUT ; Internal Clock
pragma target PWRTE    enabled         ; Power up timer
pragma target MCLR     internal        ; Reset internal
pragma target WDT      disabled        ; No watchdog
pragma target BROWNOUT enabled         ; Enable in case voltage becomes too low
pragma target IOSCFS   F4MHZ           ; Set internal oscillator to 4 MHz
pragma target clock    4_000_000       ; oscillator frequency 4 MHz

-- Setup the large array
const dword LARGE_ARRAY_1_SIZE = 100         -- choose number of array variables
const dword LARGE_ARRAY_1_VARIABLE_SIZE = 1  -- choose size of variables (byte*1)
include large_array_1                        -- include the array library
alias test is large_array_1                  -- rename/alias the array to test

var byte result

-- store some values
test[50] = 0x11
test[51] = 0x22
test[26] = 0x33
test[27] = 0x44
test[56] = 0x55
test[57] = 0x66
test[49] = 0x77
test[17] = 0x88

-- read some values
result = test[50]
result = test[51]
result = test[26]
result = test[27]
result = test[56]
result = test[57]
result = test[49]
result = test[17]


