-- Title: Testfile showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008-2019, all rights reserved.
-- Adapted-by: Joep Suijs, Rob Hamerling, Rob Jansen
-- Compiler: 2.5r2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this program shows how to use adc_hardware library.
-- It regurlarly performs an Analog-to-Digital Conversion, on channel 0
-- (pin_AN0) and uses the result as value for a delay to obtain a walking
-- light with 4 leds (Pickit2 low pincount prototype board).
--
-- Notes:
--
-- Few words about diagram: this program performs ADC on channels AN0, so you can measure
-- any voltage source connected to these channels (no more than 5V please).
-- To test the whole, you can use a voltage divider:
--
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ AN0-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--
--    - R1=1K, R2=1K: you should get ~127/~512 as ADC value (low/high)
--    - R1=1K, R2=2.2K: you should get ~175/~704 as ADC value (low/high)
--

-- device include
include 16f1827

-- Internal osc, running at 16 MHz
pragma target clock  16_000_000

-- fuses
pragma target OSC      INTOSC_NOCLKOUT
pragma target WDT      DISABLED
pragma target PWRTE    DISABLED
pragma target MCLR     EXTERNAL
pragma target CP       DISABLED
pragma target CPD      DISABLED
pragma target BROWNOUT DISABLED
pragma target CLKOUTEN DISABLED
pragma target IESO     DISABLED
pragma target FCMEN    DISABLED
pragma target WRT      DISABLED
pragma target PLLEN    DISABLED
pragma target STVR     DISABLED
pragma target VOLTAGE  MAXIMUM
pragma target LVP      DISABLED

OSCCON_SPLLEN = 0                           -- no PLL
OSCCON_IRCF   = 0b1111                      -- 16 MHz
OSCCON_SCS    = 0b00                        -- clock determined by fuse setting

enable_digital_io()                         -- all pins digital I/O

include delay

-- Configure ADC
-- We won't use any external VRef, so measures are done
-- according to PIC powering voltage
const byte ADC_NVREF = 0
-- The maximum resistance while measuring ADC is... (unit: ohms)
-- Being accurate helps speeding up ADC acquisition
const word ADC_RSOURCE = 10_000         -- 10K
-- we don't need high resolution (high resolution is optional)
const bit ADC_HIGH_RESOLUTION = 0

include adc                            -- include library

adc_init()                             -- init with our parameters

-- Specify which channel(s) will be used
ANSELA_ANSA0 = TRUE                      -- only pin_AN0
pin_AN0_direction = input

alias led1 is pin_B0                   -- )
alias led2 is pin_B1                   -- )
alias led3 is pin_B2                   -- ) 4 leds lit up in sequence
alias led4 is pin_B3                   -- )
portB_low_direction = all_output       -- )

var byte measure                       -- the actual adc value

forever loop

   led1 = on
   delay_1ms(adc_read_low_res(0))      -- lit for ?? milliseconds
   led1 = off

   led2 = on
   delay_1ms(adc_read_low_res(0))
   led2 = off

   led3 = on
   delay_1ms(adc_read_low_res(0))
   led3 = off

   led4 = on
   delay_1ms(adc_read_low_res(0))
   led4 = off

end loop

