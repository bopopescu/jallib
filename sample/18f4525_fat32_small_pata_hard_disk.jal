-- Title: FAT32-small sample for reading fat32 filesystem
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4k
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This example reads files & folders from a fat32 formatted sd card
--              using the fat32-small library. This small version only supports
--              the first partition, and only one file.
--
-- Sources:
-- http://www.microsoft.com/whdc/system/platform/firmware/fatgen.mspx
-- http://www.pjrc.com/tech/8051/ide/fat32.html
-- http://en.wikipedia.org/wiki/File_Allocation_Table
--
-- Notes:
-- 1. First format your device with fat32 before using this library.
-- 2. Do not put other files onto the storage device. This sample will
--    overwrite and erase existing files on the storage device because
--    only one file is supported, and no fragments are supported.
--
-- This file has been generated by Matt's sample generator.
--

-- include chip
include 18f4525                   -- target picmicro
pragma target osc INTOSC_NOCLKOUT -- internal oscillator
pragma target clock 32_000_000    -- oscillator frequency
pragma target wdt  CONTROL
pragma target lvp  ENABLED 
pragma target MCLR EXTERNAL        -- reset externally
pragma target XINST DISABLED       -- not supported by JalV2
--
OSCCON_IRCF = 0b111  -- set internal osc to 8mhz
OSCTUNE_PLLEN = true -- enable PPL, multiply internal osc by 4
--
enable_digital_io()  -- make all pins digital I/O
_usec_delay(100_000) -- wait for power to settle





include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


include print

-- setup SPI library
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange


-- setup 23k256 for external memory
-- setup chip select pin
ALIAS sram_23k256_chip_select             is pin_a1
ALIAS sram_23k256_chip_select_direction   is pin_a1_direction
-- initial settings
sram_23k256_chip_select_direction = output    -- chip select/slave select pin
sram_23k256_chip_select = high                -- start chip slect high (chip disabled)
-- initalize 23k256 in byte mode
alias sram_23k256_force_spi_mode is spi_master_hw_set_mode_00 -- always set spi mode to 0,0
include sram_23k256 -- setup Microchip 23k256 sram
sram_23k256_init(SRAM_23K256_SEQUENTIAL_MODE, SRAM_23K256_HOLD_DISABLE)  -- init 23k256 in sequential mode


-- setup hard disk library
const bit PATA_HD_READ_EXTRA_SPEED = FALSE -- uses additonal code space to add a speed boost to sector_read procedures
CONST BYTE PATA_HD_USE_CS0_CS1_PINS = FALSE -- set true if you will use Alternate Status, Digital Output or Drive Address registers
const bit PATA_HD_NO_INVERTER = TRUE -- if true, an external inverter chip is not needed on /iowr, /iord, /cs0, /cs1 pins
-- pin assignments
alias     pata_hd_data_low              is portb   -- data port (low bits)
alias     pata_hd_data_low_direction    is portb_direction
alias     pata_hd_data_high             is portd   -- data port (high bits)
alias     pata_hd_data_high_direction   is portd_direction
alias     pata_hd_a0                    is pin_a3
alias     pata_hd_a0_direction          is pin_a3_direction
alias     pata_hd_a1                    is pin_a1
alias     pata_hd_a1_direction          is pin_a1_direction
alias     pata_hd_a2                    is pin_a0
alias     pata_hd_a2_direction          is pin_a0_direction
alias     pata_hd_iowr                  is pin_e0
alias     pata_hd_iowr_direction        is pin_e0_direction
alias     pata_hd_iord                  is pin_a4
alias     pata_hd_iord_direction        is pin_a4_direction
;alias     pata_hd_cs1                   is pin_a3
;alias     pata_hd_cs1_direction         is pin_a3_direction
;alias     pata_hd_cs0                   is pin_a4
;alias     pata_hd_cs0_direction         is pin_a4_direction

pata_hd_a0_direction = output    -- register select pin
pata_hd_a1_direction = output    -- register select pin
pata_hd_a2_direction = output    -- register select pin
pata_hd_iowr_direction = output  -- used for write pulse
pata_hd_iord_direction = output  -- used for read pulse
;pata_hd_cs1_direction = output   -- register select pin
;pata_hd_cs0_direction = output   -- register select pin
--
include pata_hard_disk           -- include the parallel ata ide hard disk library
pata_hd_init()                   -- initialize startup settings


-- setup fat32 --
const FAT32_SMALL_SMALL_VERSION  = TRUE          -- use the small version of fat32
const FAT32_SMALL_VOL_ID[11]     = "Vol_ID     " -- 11 byte volume id (name of partition)
const FAT32_SMALL_FILE_NAME[8]   = "DATA    "    -- 8 byte file name (name of the 1 file allowed)
const FAT32_SMALL_FILE_EXT[3]    = "DAT"         -- 3 byte file extension (extension of the 1 file allowed)
const FAT32_SMALL_MAX_FILE_SIZE  = 50000        -- max file size
const byte FAT32_SMALL_ATTRIBUTE = 0x20          -- the file attributes
--
include fat32_small   -- include small fat32 library

------------------------------------------------------------
-- START of PROGRAM
------------------------------------------------------------
_usec_delay(100_000)                  -- wait for power to settle

-- procedure for sending 80 "-----------------" via serial port
procedure separator() is
   print_crlf(serial_data)
   const byte str3[] = "--------------------------------------------------------------------------------"
   print_string(serial_data, str3)
   print_crlf(serial_data)
end procedure

-- Send something to the serial port.
separator()             -- send "----" via serial port
print_crlf(serial_data)
var byte start_string[] = "SD CARD FAT32 SMALL - SAMPLE STARTED"
print_string(serial_data,start_string)
separator()             -- send "----" via serial port
print_crlf(serial_data)

fat32_small_init() -- initalize data media

-- WRITE TO THE FILE
var dword new_file_size_count -- count how many bytes you have written
-- open the file, at file sector number 0 (the beginning of the file)
fat32_small_file_open(0)
for 3000 using new_file_size_count loop             -- loop 200 times
   fat32_small_file_write("J") -- write each data byte
end loop
fat32_small_file_close() -- close the file

-- update the file size on the storage device
fat32_small_set_file_size(new_file_size_count)

-- READ THE FILE
var byte x
fat32_small_file_open(0)       -- open the file, at file sector 0 (the beginning)
for fat32_small_file_size loop -- read the entire file with fat32_small_file_size
   fat32_small_file_read(x)    -- get one byte of data
   serial_data = x          -- send it to the serial port
end loop
fat32_small_file_close()       -- close the file

;   -- WRITE TO THE END OF THE FILE
;   --
;   -- calculate the next available sector
;   var dword address = (fat32_small_file_size / 512) + 1
;   fat32_small_file_open(address)                     -- open the file
;   for 200 using new_file_size_count loop             -- loop 200 times
;      fat32_small_file_write("K") -- write each data byte
;   end loop
;   fat32_small_file_close() -- close the file
;
;   -- set the new file size
;   fat32_small_set_file_size((address * 512) + new_file_size_count)
;
;   print_crlf(serial_data)
;   print_crlf(serial_data)
;
;   -- READ THE ENTIRE FILE AGAIN
;   fat32_small_file_open(0)       -- open the file, at file sector 0 (the beginning)
;   for fat32_small_file_size loop -- read the entire file with fat32_small_file_size
;      fat32_small_file_read(x)    -- get one byte of data
;      serial_data = x          -- send it to the serial port
;   end loop
;   fat32_small_file_close()       -- close the file