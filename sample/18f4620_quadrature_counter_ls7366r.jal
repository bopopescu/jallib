-- Title: Quadrature Counter ls7366r
-- Author: Matthew Schinkel, copyright (c) 2017, all rights reserved.
-- Adapted-by:
-- Compiler:2.4q6
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: ls7366r is a quadrature encoder counter for counting or
--              keeping track of the position of a optical rotary encoder
--              or linear slide. This device can count signals of TTL type
--              (pulses 90 degrees out of phase) or signals with
--              up/down direction and clock signals. TTL mode is default
--              in this lib.
--
-- Notes:
--     Use ls7366r_write(WRITE_MDR0, 0x00) after init() for
--     devices with up/down direction and count clock outputs (not tested).
--
-- Sources:
-- https://lsicsi.com/datasheets/LS7366R.pdf
--
-- This file has been manually generated.
--

include 18f4620                     -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000      -- oscillator frequency
--
pragma target OSC      HS                        -- crystal or resonator
pragma target WDT      CONTROL                   -- watchdog
pragma target XINST    DISABLED                  -- do not use extended instructionset
pragma target DEBUG    DISABLED                  -- no debugging
pragma target BROWNOUT DISABLED                  -- no brownout reset
pragma target FCMEN    DISABLED                  -- no clock monitoring
pragma target IESO     DISABLED                  -- no int/ext osc switching
pragma target LVP      DISABLED                  -- no low voltage programming
pragma target MCLR     EXTERNAL                  -- external reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator
OSCTUNE_PLLEN = FALSE               -- no PLL
--
enable_digital_io()                 -- make all pins digital I/O
_usec_delay (100_000)               -- wait for power to stablilize
--
include delay                       -- library with delay procedures

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available
--
include print
include format
--
var byte sample_started[] = "***Jallib Sample Started***"
print_string(serial_data,sample_started)
print_crlf(serial_data)


include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_64) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange

-- led
alias led           is pin_a0
alias led_direction is pin_a0_direction
led_direction = output

-- setup ls7366r
-- setup spi chip select pin
ALIAS ls7366r_chip_select             is pin_ss
ALIAS ls7366r_chip_select_direction   is pin_ss_direction
-- initial settings
ls7366r_chip_select_direction = output -- chip select/slave select pin
ls7366r_chip_select = high             -- start chip slect high (chip disabled)
alias ls7366r_force_spi_mode is spi_master_hw_set_mode_00 -- always set spi mode to 0,0
-- Include and init
include quadrature_counter_ls7366r
ls7366r_init()
;ls7366r_write(WRITE_MDR0, 0x00) -- for devices with up/down direction and clock signals

-- Test communication
if ls7366r_read(LS7366R_READ_MDR0) == 3 then ;read what was set in init procedure
   print_string(serial_data,"LS7366R Loaded OK")
else
   print_string(serial_data,"LS7366R communication failed")
end if
print_crlf(serial_data)

-- main program
forever loop
   led = !led
   _usec_delay(250_000)

   -- Report current count/position
   print_dword_dec(serial_data,ls7366r_read_counter())
   print_crlf(serial_data)
end loop
