-- Title: Sample master to control a dedicated RC servo controller PIC
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample controls an external PIC that acts as a slave device
--              and is a dedicated PIC for servo movements. Slave PIC can support
--              24 servos that are the type used in radio control (RC)
--
-- This file has been generated by hand (manually maintained)
--
-- Notes:
-- See other servo samples before using this one
--
-- Master clock/oscillator should be equal or less then slave clock/osc
-- otherwise you may need to limit I2C bus speed.
--
-- The external pic should be written with a sample such as
-- 18fxxx_servo_rc_master_dedicated_slave_i2c.jal
--
-- Sources:
-- http://www.horrorseek.com/home/halloween/wolfstone/Motors/svoint_RCServos.html
--

-- include chip
include 18f452                     -- target picmicro
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target WDT  CONTROL        -- no watchdog
pragma target LVP  enabled         -- allow Low Voltage Programming

enable_digital_io()                -- make all pins digital I/O
-- Setup I2C
--
-- I2C pin definition
alias i2c_scl            is pin_c3
alias i2c_scl_direction  is pin_c3_direction
alias i2c_sda            is pin_c4
alias i2c_sda_direction  is pin_c4_direction
--
const word _i2c_bus_speed = 4 -- 400kHz
const bit _i2c_level = true   -- i2c levels (not SMB)
include i2c_software          -- include i2c software lib
i2c_initialize()              -- initialize i2c lib

-- Setup the dedicated pic servo library, to control an external servo pic.
--
-- specify weather to wait for slave device to be ready before continuing
-- main program. If set to false you must check the ready bit via ready function,
-- or delay 1ms between commands.
const byte SERVO_RC_MASTER_DEDICATED_WAIT = TRUE
--
-- include the dedicated servo library.
-- slave/dedicated pic runs servo_rc_master library.
include servo_rc_master_dedicated

-- main program here
var byte servo_ic_address = 0x6E -- the dedicate/external servo pic i2c address

-- set min/max movement. servo number cannot be selected, changing min/max
-- movement affects all servo's. if you do not sendA these 2 commands,
-- the default is min 50, max 250 (500us to 2.50ms pulses)
servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MIN, 50, 0)
servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MAX, 250, 0)
   
forever loop
   -- move pic 1 & 17 to center position
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 127, 1)
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 127, 17)
   _usec_delay(1_000_000)
   
   -- move pic 1 & 17 to one side
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 255, 1)
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 255, 17)
   _usec_delay(1_000_000)

   -- move pic 1 & 17 to center position
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 127, 1)
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 127, 17)
   _usec_delay(1_000_000)

   -- move pic 1 & 17 to other side
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 0, 1)
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_MOVE, 0, 17)
   _usec_delay(1_000_000)

   -- reverse direction of servo 1
   servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_REVERSE, TRUE, 1)
   
   -- turn off servo 17
   ;servo_rc_send_command_i2c(servo_ic_address, SERVO_RC_COMMAND_ON_OFF, OFF, 17)
end loop

