-- Title: H-Bridge Sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q5
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Controls a h-bridge for motor speed control.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
-- http://www.robotroom.com/BipolarHBridge.html
--
-- Notes:
-- See schematic at http://www.justanotherlanguage.org/h-bridge
--
-- I suggest using a low current source, or a current limiter while testing
-- so you don't burn your FETs witn incorrect level inputs.
-- LM317 is good as a current limiter.
--
-- CONST BIT HBRIDGE_INVERT = TRUE; -- Outputs to h-bridge are inverted.
--

-- include chip
include 18f4620                    -- target PICmicro
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target WDT  CONTROL        -- no watchdog
pragma target LVP  enabled         -- allow Low Voltage Programming
pragma target MCLR external        -- reset externally

enable_digital_io()                -- make all pins digital I/O

alias led                       is pin_a1
alias led_direction             is pin_a1_direction
led_direction = output

alias hbridge_0                 is pin_b0
alias hbridge_0_direction       is pin_b0_direction
alias hbridge_1                 is pin_b1
alias hbridge_1_direction       is pin_b1_direction
alias hbridge_2                 is pin_b2
alias hbridge_2_direction       is pin_b2_direction
alias hbridge_3                 is pin_b3
alias hbridge_3_direction       is pin_b3_direction

hbridge_0_direction = output
hbridge_1_direction = output
hbridge_2_direction = output
hbridge_3_direction = output

alias hbridge_port                 is portb
alias hbridge_port_direction       is portb_direction
hbridge_port_direction = output

include print

-- setup uart for communication
const serial_hw_baudrate  = 9600   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

print_string(serial_data,"Program Started.")
print_crlf(serial_data)

-- Command          | R1 (Bit 0)         | R2 (Bit 1)    | R3 (Bit 2)   | R4 (Bit 3)
---------------------------------------------------------------------------------------
-- Coast/Roll/Off:  | GND or disc.	     | +VDC or disc. | GND or disc.	| +VDC or disc.
-- Forward:         | GND or disc.	     | GND           | +VDC	      | +VDC or disc.
-- Reverse:         | +VDC               | +VDC or disc. | GND or disc. | GND
-- Brake/Slow Down: | +VDC	              | +VDC or disc. | +VDC         | +VDC or disc.
---------------------------------------------------------------------------------------
-- Other values may burn your circuit.

CONST byte HBBRIDGE_COAST   = 0b1010
CONST byte HBBRIDGE_REVERSE = 0b1100
CONST byte HBBRIDGE_FORWARD = 0b0011
CONST byte HBBRIDGE_BREAK   = 0b1111

-- Invert the signal to the h-bridge if needed. For example, if you are using a
-- transistors such as NPN 2N3904 to drive your FETs.
CONST BIT HBRIDGE_INVERT = TRUE;

procedure hbridge_set(byte in command) is
   if HBRIDGE_INVERT == TRUE then
      command = !command
   end if
   
   var bit command_bit at command : 0
   hbridge_0 = command_bit
   command = command >> 1
   hbridge_1 = command_bit
   command = command >> 1
   hbridge_2 = command_bit
   command = command >> 1
   hbridge_3 = command_bit
end procedure

-- main loop
forever loop
   led = ON
   print_string(serial_data,"Break")
   print_crlf(serial_data)
   hbridge_set(HBBRIDGE_BREAK)
   _usec_delay(1_000_000)

   led = OFF
   print_string(serial_data,"Reverse")
   print_crlf(serial_data)
   hbridge_set(HBBRIDGE_REVERSE)
   _usec_delay(1_000_000)

   led = ON
   print_string(serial_data,"Coast")
   print_crlf(serial_data)
   hbridge_set(HBBRIDGE_COAST)
   _usec_delay(1_000_000)

   led = OFF
   print_string(serial_data,"Forward")
   print_crlf(serial_data)
   hbridge_set(HBBRIDGE_FORWARD)
   _usec_delay(1_000_000)
end loop

