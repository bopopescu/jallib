-- Title: Interrupt on change sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4o
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample uses interrupt on change pins to set the state of
--              a led. The interrupt on change pin takes input from another
--              pin that is used to create a clock pulse.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- notes:
-- PIC must have interrupt on change pins on port B.
-- Check your datasheet for a interrupt-on-change pin.
-- Input must be clear to reduce unwanted interrupts.
--
-- Connect clock_out pin directly to int_on_change pin.
--

-- include chip
include 18f4620                   -- target picmicro
-- this program assumes a 20 mhz resonator or crystal
-- is connected to pins osc1 and osc2.
pragma target osc INTOSC_NOCLKOUT              -- hs crystal or resonator
;pragma target osc hs              -- hs crystal or resonator
;pragma target clock 20_000_000    -- oscillator frequency
pragma target clock 32_000_000    -- oscillator frequency
--
pragma target wdt  CONTROL
pragma target lvp  enabled 
pragma target MCLR external        -- reset externally
--
;OSCCON_IRCF = 0b110   -- set int osc to 4mhz
OSCCON_IRCF = 0b111   -- set internal osc to 8mhz
OSCTUNE_PLLEN = true  -- multiply internal osc by 4
--

-- set all IO as digital
enable_digital_io()

alias led0                       is pin_a0
alias led0_direction             is pin_a0_direction
led0_direction = output

alias led1                       is pin_a1
alias led1_direction             is pin_a1_direction
led1_direction = output

alias clock_out           is pin_a2
alias clock_out_direction is pin_a2_direction
clock_out_direction = output

-- choose pins to use for int on change
const byte int_on_change_pins[] = {"B",4, "B",5}
include interrupt_on_change
int_on_change_init()

-- interrupt for pin B4
procedure int_on_change_callback_0() is
   pragma inline
   led0 = int_on_change_0
end procedure

-- interrupt for pin B5
procedure int_on_change_callback_1() is
   pragma inline
   led1 = int_on_change_1
end procedure

-- main loop
forever loop
   clock_out = high
   _usec_delay(250_000)
   clock_out = low
   _usec_delay(250_000)
end loop







   
   
   
   
   
   
   
   
   
   
   
   
   
   
