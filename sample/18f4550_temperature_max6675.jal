-- Title: Sample for max6675 Temperature for K-Thermocouple with SPI.
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q2
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Library for max6675 Temperature IC to convert a
--              Cold-Junction-Compensated K-Thermocouple to a
--              Digital reading (0C to +1024C).
--
-- Sources:
-- http://datasheets.maximintegrated.com/en/ds/MAX6675.pdf
--
-- This file has been generated by hand (manually maintained)
--

include 18f4550                      -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2, and USB active.
-- But PIC will be running at 48MHz.
pragma target clock 48_000_000      -- oscillator frequency
--
pragma target OSC      HS_PLL                    -- HS osc + PLL
pragma target PLLDIV   P5                        -- 20 MHz -> 4 MHz
pragma target CPUDIV   P1                        -- Fosc divisor
pragma target USBDIV   P2                        -- USB clock selection
pragma target WDT      CONTROL                   -- watchdog
pragma target XINST    DISABLED                  -- extended instruction set
pragma target DEBUG    DISABLED                  -- debugging
pragma target BROWNOUT DISABLED                  -- brownout reset
pragma target FCMEN    DISABLED                  -- clock monitoring
pragma target IESO     DISABLED                  -- int/ext osc. switch
pragma target VREGEN   ENABLED                   -- voltage regulator
pragma target LVP      ENABLED                   -- low voltage programming
pragma target MCLR     EXTERNAL                  -- reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator
--
enable_digital_io()                 -- make all pins digital I/O
_usec_delay (100_000) -- wait for power to stablilize

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

include print

-- setup SPI library
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_00,0) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange

-- setup max6675 temperature sensor
-- setup chip select pin
ALIAS max6675_chip_select             is pin_a3
ALIAS max6675_chip_select_direction   is pin_a3_direction
-- initial settings
max6675_chip_select_direction = output -- chip select/slave select pin
max6675_chip_select = high             -- start chip slect high (chip disabled)
alias max6675_force_spi_mode is spi_master_hw_set_mode_00 -- always set spi mode to 0,0
include temperature_max6675

-- main program here
forever loop
   _usec_delay (1_000_000)

   print_string(serial_data, "TEMP: ")
   print_word_dec(serial_data, max6675_temp_c)
   serial_data = "c"
   serial_data = " "
   print_crlf(serial_data)


   print_string(serial_data, "TEMP: ")
   print_word_dec(serial_data, max6675_temp_f)
   serial_data = "f"
   serial_data = " "
   print_crlf(serial_data)

   print_crlf(serial_data)
end loop

