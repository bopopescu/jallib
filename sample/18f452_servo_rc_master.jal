-- Title: servo control sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4o
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample controls up to 24 servos that are the type used in radio
--              control (RC) and also turns a led on and off after each movement.
--
-- Sources:
-- http://www.horrorseek.com/home/halloween/wolfstone/Motors/svoint_RCServos.html
--
-- notes:
-- See usage notes in library file servo_rc_master.jal, very important!
--
-- This file has been generated by Matt's sample generator.
--

include 18f452                      -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- (unspecified configuration bits may cause a different frequency!)
pragma target clock 20_000_000      -- oscillator frequency
--
pragma target OSC      HS           -- crystal or resonator
pragma target WDT      CONTROL      -- watchdog
pragma target DEBUG    DISABLED     -- no debugging
pragma target LVP      ENABLED      -- allow Low Voltage Programming
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program, but other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
--
enable_digital_io()                 -- make all pins digital I/O


include print

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


-- setup servo pins
alias servo_1             is pin_a0
alias servo_1_direction   is pin_a0_direction
servo_1_direction = output
--
alias servo_2             is pin_a1
alias servo_2_direction   is pin_a1_direction
servo_2_direction = output
--
;alias servo_3             is pin_b2
;alias servo_3_direction   is pin_b2_direction
;servo_3_direction = output
--
;alias servo_4             is pin_b3
;alias servo_4_direction   is pin_b3_direction
;servo_4_direction = output
--
;alias servo_5             is pin_b4
;alias servo_5_direction   is pin_b4_direction
;servo_5_direction = output
--
;alias servo_6             is pin_b5
;alias servo_6_direction   is pin_b5_direction
;servo_6_direction = output
--
;alias servo_7             is pin_b6
;alias servo_7_direction   is pin_b6_direction
;servo_7_direction = output
--
;alias servo_8             is pin_b7
;alias servo_8_direction   is pin_b7_direction
;servo_8_direction = output
--
;alias servo_9             is pin_a0
;alias servo_9_direction   is pin_a0_direction
;servo_9_direction = output
--
-- choose min & max servo movment / pulse size
const byte SERVO_MIN   = 50  -- default is 50  (0.5ms min pulse)
const byte SERVO_MAX   = 255 -- default is 255 (2.5ms max pulse)
--
-- choose pic internal timers
const byte SERVO_USE_TIMER = 0            -- timer for servo's 1 to 8
;const byte SERVO_9_TO_16_USE_TIMER = 1    -- timer for servo's 9 to 16
;const byte SERVO_17_TO_24_USE_TIMER = 3   -- timer for servo's 17 to 24
include servo_rc_master -- include the servo library
servo_init()

-- use this to turn off a servo
;servo_1_on = FALSE

-- use this to reverse a servo
;servo_1_reverse = TRUE

-- example center all servo's
servo_move(127,1)
servo_move(127,2)
servo_move(127,3)
servo_move(127,4)
servo_move(127,5)
servo_move(127,6)
servo_move(127,7)
servo_move(127,8)
;servo_move(127,9)

_usec_delay (1_000_000)

-- example moving servos one and two and blink led
forever loop
   servo_move(255,1)
   servo_move(0,2)
   _usec_delay (1_000_000)

   servo_move(127,1) ;servo 1 centered
   servo_move(127,2) ;servo 2 centered
   _usec_delay (1_000_000)

   servo_move(0,1)
   servo_move(255,2)
   _usec_delay (1_000_000)

   servo_move(127,1) ;servo 1 centered
   servo_move(127,2) ;servo 2 centered
   _usec_delay (1_000_000)
end loop