-- Title: Interrupt on change sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q3
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample uses interrupt on change pins to increment a
--              counter and send the result via serial port.
--              The interrupt on change pin can take input from another
--              pin (clock_out) as an example test.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- notes:
-- Please let us know what other devices this works on so we may
-- create a sample for the jallib package.
--
-- Check your datasheet for a interrupt-on-change pin.
-- Input must be clear to reduce unwanted interrupts.
--
-- Connect clock_out pin directly to interrupt_pin.
--

include 18f4620                      -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000      -- oscillator frequency
--
pragma target OSC      HS                        -- crystal or resonator
pragma target WDT      CONTROL                   -- watchdog
pragma target XINST    DISABLED                  -- extended instruction set
pragma target DEBUG    DISABLED                  -- debugging
pragma target BROWNOUT DISABLED                  -- brownout reset
pragma target FCMEN    DISABLED                  -- clock monitoring
pragma target IESO     DISABLED                  -- int/ext osc. switch
pragma target LVP      ENABLED                   -- low voltage programming
pragma target MCLR     EXTERNAL                  -- reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator
OSCTUNE_PLLEN = FALSE               -- no PLL
--
enable_digital_io()                 -- make all pins digital I/O
--
include delay                       -- library with delay procedures
include print

-- clock out pin
alias  clock_out       is pin_A0          -- alias for pin with clock_out
pin_A0_direction  = OUTPUT

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

-- alias the interrupt flags so they are readable.
alias INT_0_ENABLE_BIT is INTCON_INT0IE
alias INT_0_FLAG_BIT is INTCON_INT0IF
alias INT_0_EDGE_BIT is INTCON2_INTEDG0

-- enable global interrupts
INTCON_GIE  = TRUE        -- Enables all unmasked interrupts
INTCON_PEIE = TRUE        -- Enables all unmasked peripheral interrupts

-- define your interrupt pin
alias interrupt_pin is pin_B0
alias interrupt_pin_direction is pin_B0_direction
interrupt_pin_direction = INPUT -- interrupt pin is input
INT_0_ENABLE_BIT = TRUE   -- interrupt pin enable bit for B0
procedure int_on_change_b0() -- procedure is written later

-- main interrupt handler
procedure interrupt() is
   pragma interrupt
   -- Check if interrupt pin 0 (B0) has an interrupt.
   if INT_0_FLAG_BIT then
      int_on_change_b0() -- call our B0 procedure
      INT_0_FLAG_BIT = FALSE -- reset interrupt flag
   end if
end procedure

var dword int_count = 0

-- interrupt for pin B0
-- define variables and procedure prototypes
procedure int_on_change_b0() is
   pragma inline
   int_count = int_count + 1

   -- print how many interrupts have occurred
   print_dword_dec(serial_data,int_count)
   print_crlf(serial_data)
end procedure

-- Create clock pulses to trigger our interrupt
-- Connect this output to pin B0.
forever loop
   clock_out = ON
   delay_100ms(1)
   clock_out = OFF
   delay_100ms(1)
end loop

