-- Title: Sample for SLIP (Serial Line IP) with USB serial
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample sends and receives SLIP (Serial Line IP) packets
--              for communication "with USB serial" data in packet form. This sample
--              will receive packets via poll method. You must continuously
--              poll the slip_poll() procedure.
--
-- Sources:
-- http://tools.ietf.org/html/rfc1055
--
-- This file has been generated by Matt's sample generator.
--

include 18f4550                      -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2, and USB active.
-- But PIC will be running at 48MHz.
pragma target clock 48_000_000      -- oscillator frequency
--
pragma target OSC      HS_PLL                    -- HS osc + PLL
pragma target PLLDIV   P5                        -- 20 MHz -> 4 MHz
pragma target CPUDIV   P1                        -- Fosc divisor
pragma target USBDIV   P2                        -- USB clock selection
pragma target WDT      CONTROL                   -- watchdog
pragma target XINST    DISABLED                  -- extended instruction set
pragma target DEBUG    DISABLED                  -- debugging
pragma target BROWNOUT DISABLED                  -- brownout reset
pragma target FCMEN    DISABLED                  -- clock monitoring
pragma target IESO     DISABLED                  -- int/ext osc. switch
pragma target VREGEN   ENABLED                   -- voltage regulator
pragma target LVP      ENABLED                   -- low voltage programming
pragma target MCLR     EXTERNAL                  -- reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator
--
enable_digital_io()                 -- make all pins digital I/O
_usec_delay (100_000) -- wait for power to stablilize


include delay

include print

-- setup the USB serial library
include usb_serial
usb_serial_init()
--
-- wait till USB device has been connected and serial port has been opened by the HOST
while !usb_serial_port_open  loop
   usb_serial_flush() -- poll USB at all times
end loop


-- setup SLIP
const word SLIP_MTU = 10  -- Max bytes per packet (Max Transfer Unit)
--
-- choose your interrupt routine. you may ignore this and create your own
-- isr or use polling method slip_poll()
const bit SLIP_USE_SERIAL_HW_ISR = FALSE -- TRUE = receive data via serial hw interrupt
--
-- choose your data carrier
alias slip_serial_data is usb_serial_data
alias slip_data_available is usb_serial_data_available
--
-- Choose the size of your receive buffer.
-- Should be the same as SLIP MTU if slip interrupts are not enabled
const byte QUEUE01_SIZE = SLIP_MTU
include queue01 -- include the queue/buffer library
alias slip_rx_buffer is queue01_nb  -- alias buffer for received data
--
-- Choose buffer to hold packet sizes
const byte QUEUE02_SIZE = 10
include queue02 -- include the queue/buffer library
alias slip_packet_size_buffer is queue02_nb     -- alias buffer for packet sizes
alias slip_packets_available is queue02_nr_used -- alias for number of packets avail
--
-- callback for when a full slip packet is received (not needed for isr)
procedure slip_received_packet_callback() is
   var byte packet_size = slip_packet_size_buffer
   if packet_size > SLIP_MTU then
      -- your packet may have a problem, it is too large
   end if

   -- send the decoded message back to the host
   for packet_size loop               -- for each byte in packet
      usb_serial_data = slip_rx_buffer -- do something with the packet data
   end loop
end procedure
--
include slip -- include the library
--
slip_init() -- init the slip library

-- main program --

-- Send some data to the serial port in slip packet form (encoded data).
const byte test_data[SLIP_MTU] = {1,2,3,0xC0,5,6,0xDB,8,9,10} -- define your packet data
var byte count1 = 0
for SLIP_MTU loop                    -- loop through all bytes in packet
   slip_send_data(test_data[count1]) -- send slip packet data via serial port
   count1 = count1 + 1
end loop
-- if you don't send SLIP_MTU bytes, then you
-- must call slip_end_packet()
;slip_end_packet()


-- Now, as a test you should send the received encoded data back
-- to the serial port. SLIP will decode it again for you and send you the decoded message.

forever loop
	usb_serial_flush()
   slip_poll() -- poll to receive slip data
   -- do other stuff but don't take too long
end loop