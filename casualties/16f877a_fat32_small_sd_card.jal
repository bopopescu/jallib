-- Title: FAT32-small sample for reading fat32 filesystem
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4k
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This example reads files & folders from a fat32 formatted sd card
--              using the fat32-small library. This small version only supports
--              the first partition, and only one file.
--
-- Sources:
-- http://www.microsoft.com/whdc/system/platform/firmware/fatgen.mspx
-- http://www.pjrc.com/tech/8051/ide/fat32.html
-- http://en.wikipedia.org/wiki/File_Allocation_Table
--
-- Notes:
-- 1. First format your device with fat32 before using this library.
-- 2. Do not put other files onto the storage device. This sample will
--    overwrite and erase existing files on the storage device because
--    only one file is supported, and no fragments are supported.
--
-- This file has been generated by Matt's sample generator.
--

include 16f877a                      -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- (unspecified configuration bits may cause a different frequency!)
pragma target clock 20_000_000      -- oscillator frequency
--
pragma target OSC      HS           -- crystal or resonator
pragma target WDT      DISABLED     -- watchdog
pragma target DEBUG    DISABLED     -- no debugging
pragma target LVP      DISABLED     -- no Low Voltage Programming
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program, but other programs may need more or different settings.
--
enable_digital_io()                 -- make all pins digital I/O
_usec_delay (100_000) -- wait for power to stablilize


include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


include print

-- setup SPI library
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange


-- setup 23k256 for external memory
-- setup chip select pin
ALIAS sram_23k256_chip_select             is pin_a1
ALIAS sram_23k256_chip_select_direction   is pin_a1_direction
-- initial settings
sram_23k256_chip_select_direction = output    -- chip select/slave select pin
sram_23k256_chip_select = high                -- start chip slect high (chip disabled)
-- initalize 23k256 in byte mode
alias sram_23k256_force_spi_mode is spi_master_hw_set_mode_00 -- always set spi mode to 0,0
include sram_23k256 -- setup Microchip 23k256 sram
sram_23k256_init(SRAM_23K256_SEQUENTIAL_MODE, SRAM_23K256_HOLD_DISABLE)  -- init 23k256 in sequential mode


-- setup the sd card pins
alias sd_chip_select is pin_SS
alias sd_chip_select_direction is pin_SS_direction
sd_chip_select = high
sd_chip_select_direction = output
--
-- setup the sd card library
alias sd_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 1,1
;const bit SD_ALWAYS_SET_SPI_MODE = TRUE -- old constant, replaced by sd_force_spi_mode 
;const bit SD_EXTRA_SPEED = TRUE
const bit SD_DELAY_AFTER_WRITE = FALSE
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings


-- setup fat32 --
const FAT32_SMALL_SMALL_VERSION  = TRUE          -- use the small version of fat32
const FAT32_SMALL_VOL_ID[11]     = "Vol_ID     " -- 11 byte volume id (name of partition)
const FAT32_SMALL_FILE_NAME[8]   = "DATA    "    -- 8 byte file name (name of the 1 file allowed)
const FAT32_SMALL_FILE_EXT[3]    = "DAT"         -- 3 byte file extension (extension of the 1 file allowed)
const FAT32_SMALL_MAX_FILE_SIZE  = 50000        -- max file size
const byte FAT32_SMALL_ATTRIBUTE = 0x20          -- the file attributes
--
include fat32_small   -- include small fat32 library

------------------------------------------------------------
-- START of PROGRAM
------------------------------------------------------------
_usec_delay(100_000)                  -- wait for power to settle

-- procedure for sending 80 "-----------------" via serial port
procedure separator() is
   print_crlf(serial_data)
   const byte str3[] = "--------------------------------------------------------------------------------"
   print_string(serial_data, str3)
   print_crlf(serial_data)
end procedure

-- Send something to the serial port.
separator()             -- send "----" via serial port
print_crlf(serial_data)
var byte start_string[] = "SD CARD FAT32 SMALL - SAMPLE STARTED"
print_string(serial_data,start_string)
separator()             -- send "----" via serial port
print_crlf(serial_data)

fat32_small_init() -- initalize data media

-- WRITE TO THE FILE
var dword new_file_size_count -- count how many bytes you have written
-- open the file, at file sector number 0 (the beginning of the file)
fat32_small_file_open(0)
for 3000 using new_file_size_count loop             -- loop 200 times
   fat32_small_file_write("J") -- write each data byte
end loop
fat32_small_file_close() -- close the file

-- update the file size on the storage device
fat32_small_set_file_size(new_file_size_count)

-- READ THE FILE
var byte x
fat32_small_file_open(0)       -- open the file, at file sector 0 (the beginning)
for fat32_small_file_size loop -- read the entire file with fat32_small_file_size
   fat32_small_file_read(x)    -- get one byte of data
   serial_data = x          -- send it to the serial port
end loop
fat32_small_file_close()       -- close the file

;   -- WRITE TO THE END OF THE FILE
;   --
;   -- calculate the next available sector
;   var dword address = (fat32_small_file_size / 512) + 1
;   fat32_small_file_open(address)                     -- open the file
;   for 200 using new_file_size_count loop             -- loop 200 times
;      fat32_small_file_write("K") -- write each data byte
;   end loop
;   fat32_small_file_close() -- close the file
;
;   -- set the new file size
;   fat32_small_set_file_size((address * 512) + new_file_size_count)
;
;   print_crlf(serial_data)
;   print_crlf(serial_data)
;
;   -- READ THE ENTIRE FILE AGAIN
;   fat32_small_file_open(0)       -- open the file, at file sector 0 (the beginning)
;   for fat32_small_file_size loop -- read the entire file with fat32_small_file_size
;      fat32_small_file_read(x)    -- get one byte of data
;      serial_data = x          -- send it to the serial port
;   end loop
;   fat32_small_file_close()       -- close the file